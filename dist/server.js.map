{"version":3,"sources":["webpack://integration/./src/server/TeamsAppsComponents.ts?6a42","webpack://integration/./src/server/boxTab/BoxTab.ts?4c96","webpack://integration/external \"compression\"?f791","webpack://integration/external \"cookie-parser\"?21dc","webpack://integration/external \"debug\"?b2c7","webpack://integration/external \"dotenv\"?e70f","webpack://integration/external \"express\"?22fe","webpack://integration/external \"express-msteams-host\"?e438","[]","webpack://integration/external \"morgan\"?3206","webpack://integration/external \"path\"?74bb","webpack://integration/webpack/bootstrap?7f80","webpack://integration/./src/server/server.ts?3175"],"names":["nonce","BoxTab","PreventIframe","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","cookieParser","log","debug","express","Express","port","process","env","PORT","use","get","req","res","authorizationUrl","CLIENT_ID","send","client","id","secret","CLIENT_SECRET","json","verify","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen"],"mappings":"ubACa,EAAAA,MAAQ,GAErB,a,sbCHA,cAQA,IAAaC,EAAb,QAAaA,EAAM,GAHlB,EAAAC,cAAc,sBACd,EAAAA,cAAc,uBACd,EAAAA,cAAc,wBACFD,GAAA,EAAAA,U,QCRbE,EAAOC,QAAUC,QAAQ,gB,QCAzBF,EAAOC,QAAUC,QAAQ,kB,QCAzBF,EAAOC,QAAUC,QAAQ,U,QCAzBF,EAAOC,QAAUC,QAAQ,W,QCAzBF,EAAOC,QAAUC,QAAQ,Y,OCAzBF,EAAOC,QAAUC,QAAQ,yB,QCAzBF,EAAOC,QAAUC,QAAQ,S,QCAzBF,EAAOC,QAAUC,QAAQ,W,QCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,Q,MCrBf,eACA,SACA,SACA,SACA,QACA,SACA,SACMS,EAAe,EAAQ,KAGvBC,EAAMC,EAAM,WAElBD,EAAI,sDAGJ,gBAIA,eAGME,EAAUC,IACVC,EAAOC,QAAQC,IAAIF,MAAQC,QAAQC,IAAIC,MAAQ,KAErDL,EAAQM,IAAIT,KAEZG,EAAQO,IAAI,SAAS,SAAUC,EAAKC,GAChC,MAEMC,EAAmB,0DADLP,QAAQC,IAAIO,+BAEhCF,EAAIG,KAAKF,MAIbV,EAAQO,IAAI,WAAW,SAAUC,EAAKC,GAClC,MAAMI,EAAc,CAChBC,GAAI,GAAGX,QAAQC,IAAIO,YACnBI,OAAQ,GAAGZ,QAAQC,IAAIY,iBAG3BP,EAAIG,KAAKC,MAIbb,EAAQM,IACJL,EAAQgB,KAAK,CACTC,OAAQ,CAACV,EAAKC,EAAKU,EAAaC,KAC3BZ,EAAYa,QAAUF,EAAIG,eAIvCtB,EAAQM,IAAIL,EAAQsB,WAAW,CAAEC,UAAU,KAG3CxB,EAAQyB,IAAI,QAASC,EAAKC,KAAKC,UAAW,MAG1C5B,EAAQM,IAAIuB,EAAO,SAGnB7B,EAAQM,IAAIwB,KAGZ9B,EAAQM,IAAI,WAAYL,EAAQ8B,OAAOL,EAAKC,KAAKC,UAAW,iBAC5D5B,EAAQM,IAAI,UAAWL,EAAQ8B,OAAOL,EAAKC,KAAKC,UAAW,gBAI3D5B,EAAQM,IAAI,EAAA0B,iBAAiBC,IAI7BjC,EAAQM,IACJ,EAAA4B,kBAAkB,CACdC,KAAMT,EAAKC,KAAKC,UAAW,QAC3BQ,WAAYH,KAKpBjC,EAAQM,IACJ,IACAL,EAAQ8B,OAAOL,EAAKC,KAAKC,UAAW,QAAS,CACzCS,MAAO,gBAKfrC,EAAQyB,IAAI,OAAQvB,GAGpBoC,EAAKC,aAAavC,GAASwC,OAAOtC,GAAM,KACpCJ,EAAI,qBAAqBI,S","file":"server.js","sourcesContent":["// Components will be added here\r\nexport const nonce = {}; // Do not remove!\r\n// Automatically added for the boxTab tab\r\nexport * from \"./boxTab/BoxTab\";\r\n","import { PreventIframe } from \"express-msteams-host\";\r\n\r\n/**\r\n * Used as place holder for the decorators\r\n */\r\n@PreventIframe(\"/boxTab/index.html\")\r\n@PreventIframe(\"/boxTab/config.html\")\r\n@PreventIframe(\"/boxTab/remove.html\")\r\nexport class BoxTab {\r\n}\r\n","module.exports = require(\"compression\");;","module.exports = require(\"cookie-parser\");;","module.exports = require(\"debug\");;","module.exports = require(\"dotenv\");;","module.exports = require(\"express\");;","module.exports = require(\"express-msteams-host\");;","module.exports = require(\"http\");;","module.exports = require(\"morgan\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as Express from \"express\";\r\nimport * as http from \"http\";\r\nimport * as path from \"path\";\r\nimport * as morgan from \"morgan\";\r\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\r\nimport * as debug from \"debug\";\r\nimport * as compression from \"compression\";\r\nconst cookieParser = require(\"cookie-parser\");\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\nlog(\"Initializing Microsoft Teams Express hosted App...\");\r\n\r\n// Initialize dotenv, to use .env file settings if existing\r\nrequire(\"dotenv\").config();\r\n\r\n// The import of components has to be done AFTER the dotenv config\r\n// eslint-disable-next-line import/first\r\nimport * as allComponents from \"./TeamsAppsComponents\";\r\n\r\n// Create the Express webserver\r\nconst express = Express();\r\nconst port = process.env.port || process.env.PORT || 3007;\r\n\r\nexpress.use(cookieParser());\r\n\r\nexpress.get(\"/auth\", function (req, res) {\r\n    const baseUrl = \"https://account.box.com/api/oauth2/authorize\";\r\n    const clientId = `${process.env.CLIENT_ID}`;\r\n    const authorizationUrl = `${baseUrl}?client_id=${clientId}&response_type=code`;\r\n    res.send(authorizationUrl);\r\n    //res.redirect(authorizationUrl);\r\n});\r\n\r\nexpress.get(\"/client\", function (req, res) {\r\n    const client: any = {\r\n        id: `${process.env.CLIENT_ID}`,\r\n        secret: `${process.env.CLIENT_SECRET}`\r\n    };\r\n\r\n    res.send(client);\r\n});\r\n\r\n// Inject the raw request body onto the request object\r\nexpress.use(\r\n    Express.json({\r\n        verify: (req, res, buf: Buffer, encoding: string): void => {\r\n            (req as any).rawBody = buf.toString();\r\n        }\r\n    })\r\n);\r\nexpress.use(Express.urlencoded({ extended: true }));\r\n\r\n// Express configuration\r\nexpress.set(\"views\", path.join(__dirname, \"/\"));\r\n\r\n// Add simple logging\r\nexpress.use(morgan(\"tiny\"));\r\n\r\n// Add compression - uncomment to remove compression\r\nexpress.use(compression());\r\n\r\n// Add /scripts and /assets as static folders\r\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\r\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\r\n\r\n// routing for bots, connectors and incoming web hooks - based on the decorators\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(MsTeamsApiRouter(allComponents));\r\n\r\n// routing for pages for tabs and connector configuration\r\n// For more information see: https://www.npmjs.com/package/express-msteams-host\r\nexpress.use(\r\n    MsTeamsPageRouter({\r\n        root: path.join(__dirname, \"web/\"),\r\n        components: allComponents\r\n    })\r\n);\r\n\r\n// Set default web page\r\nexpress.use(\r\n    \"/\",\r\n    Express.static(path.join(__dirname, \"web/\"), {\r\n        index: \"index.html\"\r\n    })\r\n);\r\n\r\n// Set the port\r\nexpress.set(\"port\", port);\r\n\r\n// Start the webserver\r\nhttp.createServer(express).listen(port, () => {\r\n    log(`Server running on ${port}`);\r\n});\r\n"],"sourceRoot":""}